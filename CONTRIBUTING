# CONTRIBUTING

First off, thanks for taking the time to contribute!  The following is a set of guidelines for contributing to **AVC**. These are mostly best-practices, not hard rules.

---

## 1. Code Style

* **Follow LLVM style** â€“ enforced via `.clang-format` (see below).
* Keep functions short and focused.
* Favour `static` functions inside translation units when possible.
* All non-trivial functions must have a Doxygen comment.

---

## 2. Branching Model

* **`main`** â€“ stable, releasable state.
* **feature branches** â€“ topic-based (`feat/xyz`).
* **bugfix branches** â€“ (`fix/abc`).

Submit pull-requests against `main`.

---

## 3. Commit Messages

Use the conventional commit format:
```
<type>(scope): <subject>

<body>
```
Example:
```
feat(objects): add BLAKE3 streaming API
```

---

## 4. Building & Testing

See [`BUILD.md`](BUILD.md).  Please run **all unit tests** before opening a PR:
```bash
mkdir build && cd build
cmake -DCMAKE_BUILD_TYPE=Release ..
make && make test
```

---

## 5. Code Formatting

A `.clang-format` file is provided at the project root.  Before committing, run:
```bash
clang-format -i $(git ls-files '*.c' '*.h')
```

---

## 6. Clangd Configuration

`clangd` reads the `compile_commands.json` file generated by CMake in the build directory.  For IDEs, export the path:
```bash
cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
```
Then symlink it into the project root so editors can find it:
```bash
ln -s build/compile_commands.json .
```

---

## 7. Reporting Issues

* Search the issue tracker first â€“ your bug may already be reported.
* Include **exact** steps to reproduce and the output of `avc version`.
* Attach logs or backtraces where applicable.

Happy hacking! ðŸŽ‰
